# Default configuration.
# Info for string values: leading/trailing whitespace will be stripped.
#   This also applies to stringlists (e.g. "1,2, 3" is equal to "1,2,3").
#   They will also be made lowercase, unless they are part of a format spec.

# The format of the times given in the table.
#
# Type: String in strftime format
time_format: "%H.%M"

# The names of the "headers" of the table and their respective weekday index.
#   Keys will be turned to all lowercase internally.
#   Weekday index between "0" and "6", where "0" stands for monday.
#   "h" is used for holidays. If "h" is given as an index,
#   holiday_code has to be set as well.
#
# Type: Mapping of string to list of char
header_values: {
  "montag - freitag": "0,1,2,3,4",
  "samstag": "5",
  "sonntag": "6",
  "sonn- und feiertag": "6,h",
}

# The country + subdivision (state/province) code used to get the holidays.
# See https://pypi.org/project/holidays/ for a list of possible values.
# If no subdivision exists for a country, simply do not set subdivision or
#    set it to the empty string.
#
# Type: dict of string to string
holiday_code:
  country: "DE"
  subdivision: "BW"

# Identifies rows, which add special meaning to some columns.
#
# Type: List of strings
annot_identifier: ["Verkehrshinweis", "Verkehrsbeschr√§nkung"]

# Identifies rows, which hold information about the specific route the
#   column is part of.
# E.g. If a table has a row starting with this identifier, try to match the
#   data columns with the entries of that row.
#
# Type: List of strings
route_identifier: ["Linie"]

# If a column does not hold any time data and begins with this identifier,
#   try to expand the given repeat interval. For example if a table contains
#   a column (B) containing "Alle 5 min.", this means between the times
#   of the column left (A) and right (C) of B, the times should be repeated
#   every 5 minutes. The repeat_identifier are used to identify these columns.
#
# Type: List of strings
repeat_identifier: [
  "alle",
]

# How to expand the repeating column, if the repeating times occur in a range.
#
# Type   : string. Either "cycle" and "mean".
# Example: "Alle 7-8 min." with "cycle" would alternate between using 7 and 8
#    minutes, while "mean" would always use 7.5 minutes.
repeat_strategy: "cycle"

# The minimum number of consecutive lines required, for something to be
#   recognized as a table.
#
# Type: int
min_table_rows: 5

# Which pages to consider for extraction. Defaults to 'all' for all pages.
#
# Type: String of comma-separated ints or ranges of ints, or 'all'.
# Example: "1-3,6,8-9" extracts the tables from the pages 1, 2, 3, 6, 8, 9.
pages: "all"

# Maximum vertical distance in pixel between two rows, to be considered on
#   the same table. Basically checks if:
#     ((y_max of current row) - (y_min of next row)) <= max_row_distance
#
# Type: int
max_row_distance: 3

# Minimum number of rows to be considered as valid table.
#
# Type: int
min_row_count: 5

# Routetype.
#   See https://developers.google.com/transit/gtfs/reference#routestxt
#
# Type: str or int
gtfs_routetype: "Bus"


# Stop names are stripped of all characters which are not letters or whitelisted.
#
# Type: list of str
allowed_stop_chars: ["-", "/", ".", " "]

# The maximum distance between stops in km. Can be set to a higher value,
#   but will slow down coordinate matching.
#
# Type: int
max_stop_distance: 100

# The path to the output directory for the gtfs files.
#   Default is "/path/to/pdf2gtfs/out".
#
# Type: str
output_dir: "../out"

# Whether or not the pdf should be preprocessed. This will, among other things,
#   remove all objects from the pdf which are not text.
#   Greatly reduces processing time, but may alter the pdf in some other ways.
#
# Type: bool
preprocess: True

# Whether the preprocessed pdf should be saved. If true, the pdf will be saved
#   to the output_dir. Setting this when 'preprocess' is false has no effect.
#
# Type: bool
output_pp: True

# Always overwrite. If the output directory contains files with the same names
#   as the ones being created, setting this to True will overwrite them
#   without asking first.
#
# Type: bool
always_overwrite: False

# Disable interactive mode (default is on). This will result in no user
#   interaction necessary and may useful, when run in a script.
# Specifically, you will not be asked whether existing files should be
#   overwritten (always_overwrite takes precedence). You will also not be
#   able to change at which dates column annotations are active/inactive.
#
# Type: bool
non_interactive: False

# Start-/Enddate used for services in calendar.txt. Defaults to ["", ""],
#   which will use (YYYY0101, YYYY1231), where YYYY is the current year.
#
# Type: list of dates in YYYYMMDD format or empty string
gtfs_date_bounds: ["", ""]

# If this is set to True, the route will be displayed in the browser.
#
# Type: bool
display_route: True

# Days after which the cache should be marked as stale, forcing its rebuild.
#
# Type: int
stale_cache_days: 7

# When searching for the stop locations, the abbreviations listed here will be
#   replaced by their respective full form. This will not affect the stop_name
#   in the 'stops.txt'.This may help with finding the proper location for a
#   stop, in case the transit agency uses unofficial names with abbreviations.
# Notes:
# - Word boundaries will be respected, i.e. the "ffm" in "hoffmannplatz" would
#   not be replaced with "Frankfurt" if it is set to {"ffm": "Frankfurt"}.
# - However, if the dictionary is set to {"str": "strasse"}, then "Hauptstr."
#   will be replaced by "Hauptstrasse".
#
# Type: dict of string to string
# TODO: lower().casefold() on value
# TODO: Clarify that "str" has the same effect as "str."
name_abbreviations:
  "a.": "am"
  "rh.": "rhein"
  "ffm": "frankfurt"
  "st.": "sankt"
  "hbf": "hauptbahnhof"
  "bf": "bahnhof"
  "str.": "strasse"
  "ka": "karlsruhe"

# TODO: Add route_display_options = [show_clusters, show_all_cluster_nodes]
#  (bool, bool) maybe merge with display_route

# Disables the detection of connections. Usually, any stops between two stops
#   A and B are not added to the output, iff A and B are the same stop and
#   A/B is not the start/end of the route. This may however result in valid
#   stops being discarded, if the route serves the same stop multiple times.
#
# Type: bool
disable_connection_detection: False
# FEATURE: Change to max_connection_length: int = 1, to allow more granularity

# TODO: Order

# Disable the detection of the stop locations.
#
# Type: bool
disable_location_detection: False
